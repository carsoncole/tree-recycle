
.container#settings
  .row
    .col-lg-12
      %h1
        %i.bi.bi-gear-fill
        Settings

  .row
    .col-lg-12
      .admin-nav
        %nav
          %ul.nav.justify-content-end
            %li.nav-item
              = link_to edit_admin_setting_path(setting) do
                %i.bi.bi-pencil-fill.icon
                EDIT

  .row 
    .col-lg-2

      %ul.nav.flex-column.sticky-top#side-settings-nav
        %li.nav-item
          = link_to 'Reservations', admin_settings_path(anchor: 'reservation-settings'), class: "nav-link"
        %li.nav-item
          = link_to 'Event details', admin_settings_path(anchor: 'details'),class: "nav-link"
        %li.nav-item
          = link_to 'Website', admin_settings_path(anchor: 'content'),class: "nav-link"
        %li.nav-item
          = link_to 'Mapping', admin_settings_path(anchor: 'mapping'),class: "nav-link"
        %li.nav-item
          = link_to 'Driver', admin_settings_path(anchor: 'driver'),class: "nav-link"
        %li.nav-item
          = link_to 'Contact', admin_settings_path(anchor: 'contact'),class: "nav-link"
        %li.nav-item
          = link_to 'Users', admin_settings_path(anchor: 'users'),class: "nav-link"
        %li.nav-item
          = link_to 'SEO', admin_settings_path(anchor: 'seo'),class: "nav-link"
        %li.nav-item
          = link_to 'Email', admin_settings_path(anchor: 'campaigns'),class: "nav-link"
        %li.nav-item
          = link_to 'Operations', admin_settings_path(anchor: 'operations'),class: "nav-link"
        %li.nav-item
          = link_to 'Logs', admin_logs_path,class: "nav-link"

    .col-lg-10
      .row
        .col-lg-10
          .section
            .row
              .col-lg-4
                %h3#reservation-settings Reservations
              .col-lg-8
                .table-responsive
                  %table.table.settings.table-borderless#stats-table
                    %tr
                      %th
                        Reservations
                      %td
                        - if setting.is_reservations_open
                          Open

                          = button_to "Close", admin_setting_path(setting, setting: {is_reservations_open: false}), method: :patch, class: 'btn btn-danger btn-sm', disabled: current_user.administrator? ? false : true
                        - else
                          Closed
                          = button_to "Open", admin_setting_path(setting, setting: {is_reservations_open: true}), method: :patch, class: 'btn btn-danger btn-sm', disabled: current_user.administrator? ? false : true

                    %tr
                      %th Reservations closed message
                      %td= setting.reservations_closed_message

      .row
        .col-lg-10
          .section
            .row
              .col-lg-4
                %h3#details Event details
              .col-lg-8
                .table-responsive
                  %table.table.settings
                    %tbody
                      %tr
                        %th
                          Pick-up date start/end time

                        %td
                          - if setting.pickup_date_and_time.present?
                            = nice_date_time(setting.pickup_date_and_time)
                          - else
                            No start time set
                          %br
                          - if setting.pickup_date_and_end_time.present?
                            = nice_date_time(setting.pickup_date_and_end_time)
                          - else
                            No end time set
                      %tr
                        %th Signup deadline
                        %td= nice_date_time(setting.sign_up_deadline_at)

      .row
        .col-lg-10
          .section
            .row
              .col-lg-4
                %h3#content Site content
              .col-lg-8
                .table-responsive
                  %table.table.settings
                    %tbody
                      %tr
                        %th Site title
                        %td= setting.site_title
                      %tr
                        %th Site description
                        %td= setting.site_description
                      %tr
                        %th Organization name
                        %td= ORGANIZATION_NAME
                      %tr
                        %th Description
                        %td= setting.description
                      %tr
                        %th Day of pickup instructions
                        %td= setting.on_day_of_pickup_instructions

      .row
        .col-lg-10
          .section
            .row
              .col-lg-4
                %h3#driver Driver
              .col-lg-8
                .table-responsive
                  %table.table.table-borderless.settings
                    %tbody
                      %tr
                        %th
                        %td= link_to "Drivers", admin_drivers_path
                      %tr 
                        %th Is Driver Site enabled?
                        %td
                          - if setting.is_driver_site_enabled?
                            = link_to admin_setting_path(setting, setting: { is_driver_site_enabled: false } ), method: :patch, data: { 'turbo-method': 'patch' } do 
                              %i.bi.bi-check2-square
                          - else
                            = link_to admin_setting_path(setting, setting: { is_driver_site_enabled: true } ), method: :patch, data: { 'turbo-method': 'patch' } do 
                              %i.bi.bi-square

                      %tr
                        %th Driver Secret Key
                        %td
                          - if setting.driver_secret_key.present?
                            = setting.driver_secret_key
                          - else
                            No key

                      %tr 
                        %th Instructions
                        %td= setting&.driver_instructions&.html_safe


      .row
        .col-lg-10
          .section
            .row
              .col-lg-4
                %h3#contact Contact
              .col-lg-8
                .table-responsive
                  %table.table.table-borderless.settings

                    %tbody

                      %tr
                        %th Contact name
                        %td= setting.contact_name
                      %tr
                        %th Contact email
                        %td= setting.contact_email
                      %tr
                        %th Contact phone
                        %td= setting.contact_phone
                      %tr
                        %th
                          Email delivery

                        %td
                          - if setting.is_emailing_enabled
                            Delivering
                            - if current_user.administrator?
                              = button_to "Stop", admin_setting_path(setting, setting: {is_emailing_enabled: false}), method: :patch, class: 'btn btn-danger btn-sm'
                          - else
                            Stopped
                            - if current_user.administrator?
                              = button_to "Start", admin_setting_path(setting, setting: {is_emailing_enabled: true}), method: :patch, class: 'btn btn-danger btn-sm'

                      %tr
                        %th
                          SMS from phone
                        %td 
                          = Rails.application.credentials.twilio.production.number

                      %tr
                        %th
                          Email batch size
                        %td
                          = setting.email_batch_quantity

                      %tr
                        %th
                          Donation notification SMS number
                        %td
                          = setting.donation_notification_sms_number

      .row
        .col-lg-10
          .section#users
            .row
              .col-lg-4
                %h3 Users
              .col-lg-8
                .table-responsive
                  %table.table.table-borderless.settings
                    %tr
                      %th
                      %td.text-end
                        = link_to "Users", admin_users_path

      .row
        .col-lg-10
          .section
            .row
              .col-lg-4
                %h3#seo SEO
              .col-lg-8
                .table-responsive
                  %table.table.settings
                    %tr
                      %th Meta Title
                      %td.text-end
                        = setting.meta_title
                    %tr
                      %th Meta Site Name
                      %td.text-end
                        = setting.meta_site_name
                    %tr
                      %th Meta Description
                      %td.text-end
                        = setting.meta_description
                    %tr
                      %th Meta Image filename
                      %td.text-end
                        = setting.meta_image_filename
                    %tr
                      %th Facebook Page ID
                      %td.text-end
                        = setting.facebook_page_id


      .row
        .col-lg-10
          .section
            .row
              .col-lg-4
                %h3#campaigns Email
              .col-lg-8
                %p.text-muted Emails will only be sent once in a campaign. Each year, archived reservations will need to be reset to enable resending.
                .mb-2
                  = button_to "Send Marketing Email #1", admin_marketing_send_email_1_path, class: 'btn btn-primary', data: { 'turbo-confirm': 'Are you sure? This will send out emails, limited in quantity by the batch size setting, to archived reservations that do not have current pending reservations with the same email address. Reservations sent this mailing will be flagged to avoid sending the same email twice. '}
                  %p
                    = Reservation.reservations_to_send_marketing_emails('is_marketing_email_1_sent').count
                    available
                    %br
                    Email reminder to all Archived reservations, that have not signed up with a 'Pending Pickup'
                .mb-2
                  = button_to "Send Marketing Email #2", admin_marketing_send_email_2_path, class: 'btn btn-primary', data: { 'turbo-confirm': 'Are you sure? This will send out emails, limited in quantity by the batch size setting, to archived reservations that do not have current pending reservations with the same email address. Reservations sent this mailing will be flagged to avoid sending the same email twice. '}
                  %p
                    = Reservation.reservations_to_send_marketing_emails('is_marketing_email_2_sent').count
                    available
                    %br
                    Email last call to all Archived reservations, that have not signed up with a 'Pending Pickup'
                .mb-2
                  = button_to "Send Pickup Reminders", admin_send_pickup_reminders_path, class: 'btn btn-primary', data: { 'turbo-confirm': 'Are you sure? This will send out emails, limited in quantity by the batch size setting, to reservations that have a status of pending-pickup that have not already been sent a reminder.'}
                  %p
                    = Reservation.pending_pickup.where(is_pickup_reminder_email_sent: false).count
                    available
                    %br
                    Email to all reservations that are 'Pending Pickup'
                .mb-2
                  .mb-2= button_to "Reset Archived reservations for campaigns", admin_marketing_reset_sent_campaigns_path, class: 'btn btn-info', data: { 'turbo-confirm': 'Are you sure? This will reset the flags on reservations that have been sent marketing emails, to enable the sending of these same marketing emails anew. '}
                  %p Campaign emails will only be sent to Archived reservations and only once. Reseting here will allow for new sends.

                .mb-4
                  %p
                    %span.fw-bold Email count last 24 hours:
                    = Log.email_count_last_24_hours

                = form_for [:admin, setting] do |f|
                  = hidden_field_tag :source, "marketing"
                  .row.g-3.align-items-center.mb-4
                    .col-lg-5.fw-bold
                      = f.label :email_batch_quantity
                    .col-lg-3  
                      = f.text_field :email_batch_quantity, class: 'form-control'
                    .col-lg-4
                      = f.submit 'Update', class: 'btn btn-primary'


                - if setting.is_emailing_enabled
                  .row
                    .col-lg-5
                      .fw-bold Email is delivering
                    .col-lg-4
                      - if current_user.administrator?
                        = button_to "Stop", admin_setting_path(setting, setting: {is_emailing_enabled: false}, source: 'marketing'), method: :patch, class: 'btn btn-danger'
                - else
                  .row
                    .col-lg-5
                      .fw-bold Email is stopped
                    .col-lg-4
                      - if current_user.administrator?
                        = button_to "Start", admin_setting_path(setting, setting: {is_emailing_enabled: true}, source: 'marketing'), method: :patch, class: 'btn btn-danger'

      .row
        .col-lg-10
          .section
            .row
              .col-lg-4
                %h3#operations Operations
              .col-lg-8
                .table-responsive
                  %table.table.table-borderless.settings

                    %tr
                      %th Archive all Reservation data
                      %td
                        = button_to "ARCHIVE", admin_post_event_archive_reservations_path, method: :delete, data: { "turbo-method": :delete, turbo_confirm: 'Are you sure? This will 1) destroy all unconfirmed reservations, 2) destroy all archived reservations that unsubscribed to marketing emails, 3) archives all reservations, destroying any older duplicates, and 4) disables all geocoding/routing on reservations. This should normally be done at the end of every event.' }, class: 'btn btn-danger btn-sm', disabled: current_user.administrator? ? false : true

                    %tr
                      %th Destroy all Unconfirmed reservations
                      %td
                        = button_to "DESTROY UNCONFIRMED", admin_destroy_unconfirmed_reservations_path, method: :delete, data: { "turbo-method": :delete, turbo_confirm: 'Are you sure? This is IRREVERSIBLE and will DESTROY all UNCONFIRMED Reservations' }, class: 'btn btn-danger btn-sm', disabled: current_user.administrator? ? false : true

                    %tr
                      %th Destroy all Archived reservations
                      %td
                        = button_to "DESTROY ARCHIVED", admin_destroy_all_archived_reservations_path, method: :delete, data: { "turbo-method": :delete, turbo_confirm: 'Are you sure? This is IRREVERSIBLE and will DESTROY all ARCHIVED Reservations' }, class: 'btn btn-danger btn-sm', disabled: current_user.administrator? ? false : true

                    %tr
                      %th Destroy reservations older than N months
                      %td
                        = form_tag '/admin/reservations/destroy-reservations' do
                          .row 
                            .col-lg-6
                              = text_field_tag :months, {}, class: 'form-control'
                            .col-lg-6
                              = submit_tag "DESTROY", class: 'btn btn-danger btn-sm', data: { 'turbo-confirm': 'Are you sure? This is IRREVERSIBLE and will DESTROY reservations.' }

                    %tr
                      %th Destroy ALL reservations
                      %td
                        = button_to "DESTROY ALL", admin_destroy_all_reservations_path, method: :delete, data: { "turbo-method": :delete, turbo_confirm: 'Are you sure? This is IRREVERSIBLE and will DESTROY all Reservations' }, class: 'btn btn-danger btn-sm', disabled: current_user.administrator? ? false : true

